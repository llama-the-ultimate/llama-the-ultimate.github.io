# Pixels
:special js

+++ Stylesheet stuff
=> gd elem (With `elem` function from other post.)
``` prelude
const elem = (tagName, props, ...children) => {
  const el = Object.assign(document.createElement(tagName), props);
  el.replaceChildren(...children);
  return el;
};

const styles = `
.palette {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}
.row {
  display: flex;
  flex-direction: row;
}
.square {
  box-sizing: border-box;
  border: none;
  width: 2rem;
  height: 2rem;
}
.selectedColor {
  border-style: dashed;
}
`;
document.head.appendChild(elem("style", {}, styles));
```
+++

+++ Palette
=> gd palette (Palette from other post.)
``` prelude
const rFactor = 36;
const gFactor = 36;
const bFactor = 85;
const colorFromByte = (byte) => {
  const r= ((byte & 0b11100000) >> 5) * rFactor;
  const g= ((byte & 0b00011100) >> 2) * gFactor;
  const b= (byte & 0b00000011) * bFactor;
  const hex = (i) => i.toString(16).padStart(2, "0");
  return `#${hex(r)}${hex(g)}${hex(b)}`;
};

const palette = () => {
  const colors = elem("div", { className: "palette" });
  let selectedColor = 0;
  const buttons = [];
  const selectColor = (idx) => {
    buttons[selectedColor].classList.remove("selectedColor");
    selectedColor = idx;
    buttons[selectedColor].classList.add("selectedColor");
  };

  const rowLength = 4;
  
  for (let row = 0; row < 256 / rowLength; row++) {
    const rowDiv = elem("div", { className: "row" });
    colors.appendChild(rowDiv);
    for (let col = 0; col < rowLength; col++) {
      const byte = (row * rowLength) + col;
      const button = elem("button", { className: "square" });
      rowDiv.appendChild(button);
      buttons.push(button);
      const color = colorFromByte(byte);
      button.style.background = color;
      button.onclick = () => {
        selectColor(byte);
        colors.dispatchEvent(
          new CustomEvent("selectColor", {
            detail: { byte: byte, color: color },
          })
        );
      };
    }
  }
  colors.selectColor = (idx) => {
    if (idx >= 0 && idx < colorButtons.length) {
      selectColor(idx);
    }
  };
  return colors;
};
```
