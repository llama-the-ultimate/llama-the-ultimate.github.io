# Scratch

## Nice things
Getting stuff done without writing a ton of code is nice. TBH the subset of JavaScript that I’m using is fine and has pretty okay ergonomics. Garbage collection, somewhat functional functions and not too cumbersome data structure stuff is convenient.

Being able to distribute something small that can be run on fairly arbitrary machines without a lot of setting up. I don’t think tens or hundreds of megabytes of runtime is worth it for the stuff I’m typically building. I don’t usually want to build large things or solve complex problems.

Simple “build toolchain.” I like pressing F5 in DrRacket. I like editing a .js-file, saving it and pressing F5 in my browser. I’m okay with running a more buildy and compily thing that maybe produces a file, particularly if the result is very easily distributable.

I ran into Kartik Agaram’s Freewheeling a month or two ago:

=> url http://akkartik.name/freewheeling Using computers more freely and safely
=> url http://akkartik.name/post/roundup22 A year of freewheeling apps
=> url http://akkartik.name/lines.html Plain text. With lines.

=> url https://wiki.xxiivv.com/site/varvara.html Varvara and Uxn also cool.

JS stuff. It would be nice to have like subset-of-a-browser as a smol VM.

=> url https://bellard.org/quickjs/ QuickJS
=> url https://duktape.org/ Duktape
=> url https://mujs.com/ MuJS

My impression is that QuickJS is more popular than the others, but I’m not sure (and I don’t know if that implies anything I care about).

=> url https://github.com/endojs/Jessie Jessie

Jessie doesn’t seem to be particularly implemented or anything.

I would be interested in something like an implementation of only a subset of JavaScript, maybe something along the lines of Jessie.

APEs are cool.
=> url https://justine.lol/ape.html Actually Portable Executable
=> url https://redbean.dev/ redbean
Also I think QuickJS exists as an APE somewhere...

## Hmm

How does “IDE stuff” do the stuff. Syntax highlighting etc. How much happens when a key is pressed. It’s tempting to track “safe spots” in the file. E.g. “at position x, y and z we are at toplevel or similar, so changes between y and z are isolated from surroundings.” But clearly there’s stuff removing a thing defined between y and z that is used after z. Something about: Keeping track of things during editing vs. more batch job read the entire file after doing some edits...

## Best practice

* Rest
* Changing my mind

## Blog status

I’m considering more self-containedness. Should I just chuck all the css into the html file? Also the JavaScript? The more JSy posts have the JS within `<code>`-stuff in the HTML anyway, so the only code I’d need to add is the bit that finds and executes the rest of the code. Maybe self-contained version as separate version of page, but multiple files by default. So just a “server thing” that decides between refering to files vs inlining the content. Would have to do some work on and around “require” ot make it work.

The lines stuff takes care of the svg files.

I’m not sure about the other graphics, like the sokoban graphics. Maybe an upcoming custom pixels format-and-editor. And/or data url stuff?

I need to get rid of CodeMirror. A textarea would almost do (and I’m using that for the JS), but programmatically inserting text breaks undo history. Should look for a small textarea-with-better-undo-support implementation.

=> url https://stackoverflow.com/questions/13597007/how-can-i-undo-the-programmatic-insertion-of-text-into-a-textarea textarea stuff on SO
=> url https://stackoverflow.com/questions/44471699/how-to-make-undo-work-in-an-html-textarea-after-setting-the-value more SO textarea stuff
=> url https://github.com/antonmedv/codejar codejar github
=> url https://www.npmjs.com/package/codejar codejar npm

codejar (or parts of it) seems a little promising.

Should I add id attributes to headings? I don’t know.

=> url https://rakhim.org/honestly-undefined/19/ Maybe write an elaborate blog setup post at some point.
