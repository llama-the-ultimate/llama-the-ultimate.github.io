# How to smol?

## Some thing I like

Getting stuff done without writing a ton of code is nice. I like to use objectively good languages like Racket, but to be honest the subset of JavaScript that I’m using is fine and has pretty okay ergonomics. On the other hand, getting stuff done in something like C seems cumbersome to me. Something like: Garbage collection, somewhat functional functions and not too cumbersome data structure stuff is convenient. 

Being able to distribute something small that can be run on fairly arbitrary machines without a lot of setting up. I don’t think tens or hundreds of megabytes of runtime is worth it for the stuff I’m typically building. I don’t usually want to build large things or solve complex problems.

Simple “build toolchain.” I like pressing F5 in DrRacket. I like editing a .js-file, saving it and pressing F5 in my browser. I’m okay with running a more buildy and compily thing that maybe produces a file, particularly if the result is very easily distributable.

I ran into Kartik Agaram’s Freewheeling a month or two ago:

=> url http://akkartik.name/freewheeling Using computers more freely and safely
=> url http://akkartik.name/post/roundup22 A year of freewheeling apps
=> url http://akkartik.name/lines.html Plain text. With lines.

He’s using Lua and LÖVE and, as far as I can tell, building “desktop apps.” I think I have pretty similar views on software and it’s like really cool stuff.

Circumstances being what they are, I _do_ like being able to point a browser at an URL and have my thing running there.

Re the last thing: Being able to have (at leas some of) the code being the same for desktop app and for online thing in browser is possibly nice, at least if it doesn’t e.g. come with a complex build toolchain. I’m not sure how I feel about e.g. compiling to Wasm for running it in the browser. Sounds like more buildy stuff and also I suspect JavaScript is more inspectable and debuggable when running in a browser than Wasm is. If the desktop app is the primary thing and the browser-version mostly just works then maybe it’s not a _huge_ deal. Not sure.

## Some stuff

I’ve used Zig a little bit. Seems less cumbersome than C. It produces small executables. On the one hand, if I wanna build small things that are not complex, then they should be buildable in a low-level language without too much effort. On the other hand, no garbage collection is probably still pretty cumbersome. If I wanna do some scripting language plus “serious language” setup then Zig seems more pleasant than C (but is currently also more of a moving target).

Used some Rust too, but not as recently as Zig. I dunno. My feels about it are similar to those about Zig, even though the language has a very different feel to it.

I haven’t really used Go. It produces executables that come with a runtime with garbage collection and stuff. Maybe it’s nice.

I haven’t really used Lua. I’m sure I can make Lua-stuff run in the browser as well, but I’m not sure I wanna. I should probably learn some Lua at least...

## Some things to look at

=> url https://bellard.org/quickjs/ QuickJS
=> url https://duktape.org/ Duktape
=> url https://mujs.com/ MuJS

My impression is that QuickJS is more popular than the others, but I’m not sure (and I don’t know if that implies anything I care about).

=> url https://github.com/endojs/Jessie Jessie

Jessie doesn’t seem to be particularly implemented or anything.

I would be interested in something like an implementation of only a subset of JavaScript, maybe something along the lines of Jessie. (One of the nice thing

APEs are cool.
=> url https://justine.lol/ape.html Actually Portable Executable
=> url https://redbean.dev/ redbean
Also I think QuickJS exists as an APE somewhere...

