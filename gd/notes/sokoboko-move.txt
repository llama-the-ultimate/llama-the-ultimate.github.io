# Sokoban: Making cat move
:special js

=> gd sokoboko-gfx In previous post we drew a level.

We ended up with almost this code:

``` repl
const level = `
#########
#  $ @..#
# $ $   #
#  ###  #
# $     #
##  ##..#
#########
`.slice(1, -1).split("\n").map(x => x.split(""));

const spriteSheet = outElement.appendChild(document.createElement("img"));
spriteSheet.src = "./../assets/soko-sprites.png"
spriteSheet.alt = "sprite sheet";

const canvas = document.createElement("canvas");
outElement.replaceChildren(canvas);
const scale = 3;
canvas.width = level[0].length * 16 * scale;
canvas.height = level.length * 16 * scale;

const ctx = canvas.getContext("2d");
ctx.imageSmoothingEnabled = false;

const vector = (x, y) => ({ x: x, y: y });

const sprites = {
  " ": vector(0, 0), // top left is empty floor
  "#": vector(1, 0), // top right is wall
  "@": vector(0, 1), // middle left is player
  "+": vector(0, 1), // same sprite for player on goal square
  "$": vector(1, 1), // middle right is “box”
  ".": vector(0, 2), // bottom left is goal square
  "*": vector(1, 2), // middle left is “box” on a goal square
};

const drawSquare = (square, position) => {
  const sprite = sprites[square];
  ctx.drawImage(
    spriteSheet,
    sprite.x * 16,
    sprite.y * 16,
    16,
    16,
    position.x * 16 * scale,
    position.y * 16 * scale,
    16 * scale,
    16 * scale
  );
};

const drawLevel = () => {
  level.forEach((row, y) => row.forEach((square, x) => drawSquare(square, vector(x, y))));
};

spriteSheet.onload = () => drawLevel();
```

## Positioning

We want to move the cat. We can make a function that returns it position, so that we know where to move it from. (Cats tend to move from where they are.)

``` repl
const playerPosition = () => {
  for ([y, row] of level.entries()) {
    for ([x, square] of row.entries()) {
      if (square === "@" || square === "+") {
        return vector(x, y);
      }
    }
  }
};

console.log(playerPosition());
```

=> url http://www.sokobano.de/wiki/index.php?title=Level_format#Solution A Sokoban solution is like a string where each character corresponds to one move made.

We will make vectors for the directions the cat can move in, and a plus-function that we can use for adding a direction to a position. We’ll use the (lowercase) letters that are used in Sokoban solutions as property names.

``` repl
const directions = {
  u: vector(0, -1),
  d: vector(0, 1),
  l: vector(-1, 0),
  r: vector(1, 0),  
};

const plus = (a, b) => vector(a.x + b.x, a.y + b.y);

console.log(plus(playerPosition(), directions.l));
```

Should be the position of the square just to the left of the cat.

## Being stupid

Okay the array with the arrays with the characters is not a _great_ way to model things. I like using the symbols from the level format but it _is_ awkward having more than one symbol for one thing. Something that takes different “collision layers” or something into account probably makes it easier to implement some things.

=> url https://www.puzzlescript.net/ PuzzleScript is cool btw.

Also, instead of one move being a functional update of the game state or something like that, we’ll just mutate the arrays. I think there’s a fun and side-effecty way to do the movement. Also it’s fun to like recklessly mutate state and then trust that we can implement undo-functionality in order to restore the state we destroyed :)
